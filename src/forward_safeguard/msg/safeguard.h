// Generated by gencpp from file pcl_processor/safeguard.msg
// DO NOT EDIT!


#ifndef PCL_PROCESSOR_MESSAGE_SAFEGUARD_H
#define PCL_PROCESSOR_MESSAGE_SAFEGUARD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pcl_processor
{
template <class ContainerAllocator>
struct safeguard_
{
  typedef safeguard_<ContainerAllocator> Type;

  safeguard_()
    : decision(0)
    , distance(0.0)
    , oriX(0.0)
    , oriY(0.0)
    , oriZ(0.0)
    , placX(0.0)
    , placY(0.0)
    , placZ(0.0)  {
    }
  safeguard_(const ContainerAllocator& _alloc)
    : decision(0)
    , distance(0.0)
    , oriX(0.0)
    , oriY(0.0)
    , oriZ(0.0)
    , placX(0.0)
    , placY(0.0)
    , placZ(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _decision_type;
  _decision_type decision;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _oriX_type;
  _oriX_type oriX;

   typedef double _oriY_type;
  _oriY_type oriY;

   typedef double _oriZ_type;
  _oriZ_type oriZ;

   typedef double _placX_type;
  _placX_type placX;

   typedef double _placY_type;
  _placY_type placY;

   typedef double _placZ_type;
  _placZ_type placZ;




  typedef boost::shared_ptr< ::pcl_processor::safeguard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pcl_processor::safeguard_<ContainerAllocator> const> ConstPtr;

}; // struct safeguard_

typedef ::pcl_processor::safeguard_<std::allocator<void> > safeguard;

typedef boost::shared_ptr< ::pcl_processor::safeguard > safeguardPtr;
typedef boost::shared_ptr< ::pcl_processor::safeguard const> safeguardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pcl_processor::safeguard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pcl_processor::safeguard_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pcl_processor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'pcl_processor': ['/home/mohammad/Documents/CMU/RED/catkin_ws/src/pointcloud/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pcl_processor::safeguard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pcl_processor::safeguard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pcl_processor::safeguard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pcl_processor::safeguard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pcl_processor::safeguard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pcl_processor::safeguard_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pcl_processor::safeguard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e86bdfc6acd13ece55ca0ed104f5b4b1";
  }

  static const char* value(const ::pcl_processor::safeguard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe86bdfc6acd13eceULL;
  static const uint64_t static_value2 = 0x55ca0ed104f5b4b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::pcl_processor::safeguard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pcl_processor/safeguard";
  }

  static const char* value(const ::pcl_processor::safeguard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pcl_processor::safeguard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 decision\n\
float64 distance\n\
float64 oriX\n\
float64 oriY\n\
float64 oriZ\n\
float64 placX\n\
float64 placY\n\
float64 placZ\n\
";
  }

  static const char* value(const ::pcl_processor::safeguard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pcl_processor::safeguard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.decision);
      stream.next(m.distance);
      stream.next(m.oriX);
      stream.next(m.oriY);
      stream.next(m.oriZ);
      stream.next(m.placX);
      stream.next(m.placY);
      stream.next(m.placZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct safeguard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pcl_processor::safeguard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pcl_processor::safeguard_<ContainerAllocator>& v)
  {
    s << indent << "decision: ";
    Printer<int8_t>::stream(s, indent + "  ", v.decision);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "oriX: ";
    Printer<double>::stream(s, indent + "  ", v.oriX);
    s << indent << "oriY: ";
    Printer<double>::stream(s, indent + "  ", v.oriY);
    s << indent << "oriZ: ";
    Printer<double>::stream(s, indent + "  ", v.oriZ);
    s << indent << "placX: ";
    Printer<double>::stream(s, indent + "  ", v.placX);
    s << indent << "placY: ";
    Printer<double>::stream(s, indent + "  ", v.placY);
    s << indent << "placZ: ";
    Printer<double>::stream(s, indent + "  ", v.placZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PCL_PROCESSOR_MESSAGE_SAFEGUARD_H
