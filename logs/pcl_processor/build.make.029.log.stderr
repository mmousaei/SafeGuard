[01m[K/home/mohammadreza/Documents/CMU-Project/RED/catkin_ws/src/pointcloud/cylider_seg.cpp:[m[K In function â€˜[01m[Kvoid cloud_cb(const PointCloud2ConstPtr&)[m[Kâ€™:
[01m[K/home/mohammadreza/Documents/CMU-Project/RED/catkin_ws/src/pointcloud/cylider_seg.cpp:49:23:[m[K [01;31m[Kerror: [m[Kconflicting declaration â€˜[01m[Kpcl::PCLPointCloud2 cloud_filtered[m[Kâ€™
   pcl::PCLPointCloud2 cloud_filtered;
[01;32m[K                       ^[m[K
[01m[K/home/mohammadreza/Documents/CMU-Project/RED/catkin_ws/src/pointcloud/cylider_seg.cpp:38:32:[m[K [01;36m[Knote: [m[Kprevious declaration as â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filtered[m[Kâ€™
   pcl::PointCloud<PointT>::Ptr cloud_filtered (new pcl::PointCloud<PointT>);
[01;32m[K                                ^[m[K
[01m[K/home/mohammadreza/Documents/CMU-Project/RED/catkin_ws/src/pointcloud/cylider_seg.cpp:54:45:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kstruct pcl::PCLPointCloud2[m[Kâ€™ has no member named â€˜[01m[Kpoints[m[Kâ€™
   std::cerr << "PointCloud has: " << cloud->points.size () << " data points." << std::endl;
[01;32m[K                                             ^[m[K
[01m[K/home/mohammadreza/Documents/CMU-Project/RED/catkin_ws/src/pointcloud/cylider_seg.cpp:64:28:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kpcl::PassThrough<pcl::PointXYZ>::setInputCloud(pcl::PCLPointCloud2*&)[m[Kâ€™
   pass.setInputCloud (cloud);
[01;32m[K                            ^[m[K
In file included from [01m[K/usr/include/pcl-1.7/pcl/common/io.h:45:0[m[K,
                 from [01m[K/usr/include/pcl-1.7/pcl/io/file_io.h:42[m[K,
                 from [01m[K/usr/include/pcl-1.7/pcl/io/pcd_io.h:44[m[K,
                 from [01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:70[m[K,
                 from [01m[K/home/mohammadreza/Documents/CMU-Project/RED/catkin_ws/src/pointcloud/cylider_seg.cpp:4[m[K:
[01m[K/usr/include/pcl-1.7/pcl/pcl_base.h:95:7:[m[K [01;36m[Knote: [m[Kcandidate: void pcl::PCLBase<PointT>::setInputCloud(const PointCloudConstPtr&) [with PointT = pcl::PointXYZ; pcl::PCLBase<PointT>::PointCloudConstPtr = boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >]
       setInputCloud (const PointCloudConstPtr &cloud);
[01;32m[K       ^[m[K
[01m[K/usr/include/pcl-1.7/pcl/pcl_base.h:95:7:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PCLPointCloud2*[m[Kâ€™ to â€˜[01m[Kconst PointCloudConstPtr& {aka const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >&}[m[Kâ€™
[01m[K/home/mohammadreza/Documents/CMU-Project/RED/catkin_ws/src/pointcloud/cylider_seg.cpp:141:51:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[KfromPCL(pcl::PointCloud<pcl::PointXYZ>&, sensor_msgs::PointCloud2&)[m[Kâ€™
   pcl_conversions::fromPCL(*cloud_cylinder, output);
[01;32m[K                                                   ^[m[K
In file included from [01m[K/home/mohammadreza/Documents/CMU-Project/RED/catkin_ws/src/pointcloud/cylider_seg.cpp:4:0[m[K:
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:80:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const uint64_t&, ros::Time&)
   void fromPCL(const pcl::uint64_t &pcl_stamp, ros::Time &stamp)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:80:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst uint64_t& {aka const long unsigned int&}[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:92:13:[m[K [01;36m[Knote: [m[Kcandidate: ros::Time pcl_conversions::fromPCL(const uint64_t&)
   ros::Time fromPCL(const pcl::uint64_t &pcl_stamp)
[01;32m[K             ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:92:13:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 2 provided
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:110:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const pcl::PCLHeader&, std_msgs::Header&)
   void fromPCL(const pcl::PCLHeader &pcl_header, std_msgs::Header &header)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:110:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst pcl::PCLHeader&[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:126:20:[m[K [01;36m[Knote: [m[Kcandidate: std_msgs::Header pcl_conversions::fromPCL(const pcl::PCLHeader&)
   std_msgs::Header fromPCL(const pcl::PCLHeader &pcl_header)
[01;32m[K                    ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:126:20:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 2 provided
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:155:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const pcl::PCLImage&, sensor_msgs::Image&)
   void fromPCL(const pcl::PCLImage &pcl_image, sensor_msgs::Image &image)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:155:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst pcl::PCLImage&[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:196:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const pcl::PCLPointField&, sensor_msgs::PointField&)
   void fromPCL(const pcl::PCLPointField &pcl_pf, sensor_msgs::PointField &pf)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:196:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst pcl::PCLPointField&[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:205:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const std::vector<pcl::PCLPointField>&, std::vector<sensor_msgs::PointField_<std::allocator<void> > >&)
   void fromPCL(const std::vector<pcl::PCLPointField> &pcl_pfs, std::vector<sensor_msgs::PointField> &pfs)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:205:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst std::vector<pcl::PCLPointField>&[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:251:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const pcl::PCLPointCloud2&, sensor_msgs::PointCloud2&)
   void fromPCL(const pcl::PCLPointCloud2 &pcl_pc2, sensor_msgs::PointCloud2 &pc2)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:251:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst pcl::PCLPointCloud2&[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:294:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const pcl::PointIndices&, pcl_msgs::PointIndices&)
   void fromPCL(const pcl::PointIndices &pcl_pi, pcl_msgs::PointIndices &pi)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:294:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst pcl::PointIndices&[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:324:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const pcl::ModelCoefficients&, pcl_msgs::ModelCoefficients&)
   void fromPCL(const pcl::ModelCoefficients &pcl_mc, pcl_msgs::ModelCoefficients &mc)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:324:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst pcl::ModelCoefficients&[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:354:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const pcl::Vertices&, pcl_msgs::Vertices&)
   void fromPCL(const pcl::Vertices &pcl_vert, pcl_msgs::Vertices &vert)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:354:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst pcl::Vertices&[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:360:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const std::vector<pcl::Vertices>&, std::vector<pcl_msgs::Vertices_<std::allocator<void> > >&)
   void fromPCL(const std::vector<pcl::Vertices> &pcl_verts, std::vector<pcl_msgs::Vertices> &verts)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:360:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst std::vector<pcl::Vertices>&[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:377:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(std::vector<pcl::Vertices>&, std::vector<pcl_msgs::Vertices_<std::allocator<void> > >&)
   void fromPCL(std::vector<pcl::Vertices> &pcl_verts, std::vector<pcl_msgs::Vertices> &verts)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:377:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kstd::vector<pcl::Vertices>&[m[Kâ€™
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:424:8:[m[K [01;36m[Knote: [m[Kcandidate: void pcl_conversions::fromPCL(const pcl::PolygonMesh&, pcl_msgs::PolygonMesh&)
   void fromPCL(const pcl::PolygonMesh &pcl_mesh, pcl_msgs::PolygonMesh &mesh)
[01;32m[K        ^[m[K
[01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:424:8:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PointCloud<pcl::PointXYZ>[m[Kâ€™ to â€˜[01m[Kconst pcl::PolygonMesh&[m[Kâ€™
make[2]: *** [CMakeFiles/cylider_seg.dir/cylider_seg.cpp.o] Error 1
make[1]: *** [CMakeFiles/cylider_seg.dir/all] Error 2
make: *** [all] Error 2
